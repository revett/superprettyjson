#!/usr/bin/env node

const spj = require("../lib/superprettyjson");
const fs = require("node:fs");
const colors = require("@colors/colors/safe");
const argv = require("minimist")(process.argv.slice(2));

const opts = {
  keysColor: argv.keys || process.env.SUPERPRETTYJSON_KEYS,
  dashColor: argv.dash || process.env.SUPERPRETTYJSON_DASH,
  defaultIndentation: argv.indent || process.env.SUPERPRETTYJSON_INDENT,
  stringColor: argv.string || process.env.SUPERPRETTYJSON_STRING,
  multilineStringColor: argv.multiline_string || process.env.SUPERPRETTYJSON_MULTILINE_STRING,
  numberColor: argv.number || process.env.SUPERPRETTYJSON_NUMBER,
  positiveNumberColor: argv.number || process.env.SUPERPRETTYJSON_NUMBER_POSITIVE,
  negativeNumberColor: argv.number || process.env.SUPERPRETTYJSON_NUMBER_NEGATIVE,
  noColor: argv.nocolor || process.env.SUPERPRETTYJSON_NOCOLOR,
  noAlign: argv.noalign || process.env.SUPERPRETTYJSON_NOALIGN,
  escape: argv.escape || process.env.SUPERPRETTYJSON_ESCAPE,
  inlineArrays: argv["inline-arrays"] || process.env.SUPERPRETTYJSON_INLINE_ARRAYS,
};

const renderFile = (filename) => {
  try {
    const f = fs.readFileSync(filename, "utf8");
    console.log(spj.renderString(f, opts));
  } catch (e) {
    console.error(colors.red(`Error: File '${filename}' does not exist`));
    process.exit(1);
  }
};

const renderStream = () => {
  let stream = "";

  process.stdin.resume();
  process.stdin.setEncoding("utf8");

  process.stdin.on("data", (chunk) => {
    if (chunk === "\n") {
      console.log(spj.renderString(stream, opts));
      stream = "";
      return;
    }
    stream += chunk;
  });

  process.stdin.on("end", () => {
    console.log(spj.renderString(stream, opts));
  });
};

// Parsed positional arguments, not flags
const params = argv._;

// Handle routing to correct render function
if (params.length > 0) {
  renderFile(params[0]);
} else {
  renderStream();
}
